-----------------------------------------------------------------------------
--
-- Module      :  JUtils
-- Copyright   :
-- License     :  MIT
--
-- Maintainer  :  -
-- Stability   :
-- Portability :
--
-- |
--

{-# LANGUAGE FlexibleInstances, UndecidableInstances #-}

module JUtils (

  initJava
, wekaHomeEnv
, withWekaHomeEnv


, JavaClassID(..)
, newInstance0

, JString
, jString
, stringResult

--, EmptyJArray(..)

, JNI.Java
, JNI.io
, JNI.runJava

, JNI.newObjectFrom
, JNI.getConstructor

, JNI.JavaObject(..)

, JIO.println

) where

import System.Environment
import System.FilePath

import qualified Foreign.Java as JNI
import qualified Foreign.Java.Bindings.Support as JNIS
import qualified Java.Lang as Lang
import qualified Foreign.Java.IO as JIO
import qualified Foreign.Java.Types as JTypes

import Foreign.Ptr (nullPtr)

import Control.Monad (liftM)
import Data.Maybe (fromJust)
import Data.List (intercalate)

-----------------------------------------------------------------------------

-- | Inits JVM, given a path to WEKA root directory.
initJava wekaHome extraClassPath = do
    let wClasspath = wekaHome ++ pathSeparator:"weka.jar"
        classpath = intercalate [searchPathSeparator] (wClasspath:extraClassPath)
    JNI.initJava ["-Djava.class.path=" ++ classpath]


-- | Get @WEKA_HOME@ environment variable.
wekaHomeEnv = lookupEnv "WEKA_HOME"

withWekaHomeEnv extraClasspath java = do
                          Just wekaHome <- wekaHomeEnv
                          initJava wekaHome extraClasspath
                          JNI.runJava java

-----------------------------------------------------------------------------

-- | Create new instance, using the default (no argument) constructor.
newInstance0 :: (JNIS.InstanceOf a, JNIS.CoercedType a ~ o, JavaClassID a) =>
             a      -- ^ An identifier, generated by `j2hs`.
             -> JNI.Java (Maybe o)

newInstance0 i = do Just clazz <- JNI.getClass $ classId i
                    Just inst  <- JNI.newObject clazz
                    JNIS.coerce inst i


-- | Full class identifier.
class JavaClassID a where classId :: a -> String
                          jClass  :: a -> JNI.Java (Maybe JNI.JClass)

                          jClass = JNI.getClass . classId

-----------------------------------------------------------------------------

type JString = Lang.String'
--type JString = Lang.String''

jString :: String -> JNI.Java JString
jString s = do Just clazz <- JNI.getClass "java.lang.String"
               Just strConstructor <- JNI.getConstructor clazz JNI.string
               Just jstr' <- JNI.newObjectFrom strConstructor s
               Just jstr <- JNIS.coerce jstr' Lang.String
               return jstr

-----------------------------------------------------------------------------

--data EmptyJArray = EmptyJArray

--instance JNIS.Array EmptyJArray where asMaybeArrayObject _ = return Nothing

-----------------------------------------------------------------------------

stringResult :: JNI.Java (Maybe JString) -> JNI.Java String
stringResult a = do Just res <- a
                    JNI.toString res

-----------------------------------------------------------------------------

instance JNIS.ArrayResult [JNI.JObject] where
    type ArrayResultType [JNI.JObject] = JNIS.ArrayResultType [String]
    type ArrayResultComponent [JNI.JObject] = Maybe JNI.JObject

    toArrayResult (Right (Just arr)) = liftM (map fromJust) (JNI.toList arr)


